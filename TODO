- Использование action:reset_time (т.е. автоматического "сброса" значения датчика через заданное время)
скорее всего нельзя использовать в тестах основанных на сравнении результатов с "эталонным" логом теста.
Т.к. это не realtime таймер.. и "в общем случае" наверно приведёт к случайному "вклиниванию" лога "сброса"..
(хотя може просто отключить этот лог ?)

- 'action:multiset' и 'check:multicheck' нарушают правило "один тест за раз".. Но всё-таки удобны для начальной инициализации
и проверки сразу группы логически связанных условий
  + сделано

-----
- Возможно стоит сделать ключик --show-only-failed-log
- Сделать возможность задать не один конкретный тест, а сразу список.
Типа: --play-tests t1,t2,t3,t10,t8

- Продумать вопрос об уровне логов. Может ввести цифрофой уровень.
Чтобы можно было более плавно регулировать количество (подробность) выводимых логов.
Например:
      0 - выключено
    >=1 - только резултат
    >=2 - результат работы каждого теста отдельно
    >=3 - результат работы каждого вызова в тесте (но без вложенных (outlink))
    >=4 - результат работы каждого вызова в тесте (c вложенными (outlink))
    >=5 - + вывод actions

- (подумать): Сделать ключ задающий число "проигрываний" теста. 
   "<0" - безконечно
   "0,1" - 1 раз
   (см. также п. 20) .
А вообще для консольного проигрывателя, циклы можно сделать простым скриптом на bash (запуская проигрыватель желаемое число раз)

- Сделать в плээре сигналы на разные события (begin/finish test, begin/finish item, begin/finish action, run check и т.п.),
    чтобы можно было написать графический плээр на основе консольного...
    - сигналы тянут за собой glib. Что для консольного лишнее.. :(

- Продумать возможность циклов (повторений).. (конкретного теста, конкретного дейтсвия, группы действий (можно вынести в отдельный тест под идее),
группу тестов (можно вынести в отдельный файл) ----> видимо универсальным будет "повторение действия заданное количество раз. -1 - безконечность".
   Хотя всё это уже похоже больше имитатор, чем "тестер".
   
- В графическом плээере, сделать графическое отображение состояния запущенных фоновых процессов..
- Реализовать меню "Открыть".
- (подумать) Сделать random - паузу. И может ещё что-нибудь на основе RANDOM (выставление случайного значения) из заданного диапазона

- Сделать графический sensor-viewer, с возможностью менять значения датчиков..
   это не связано по идее с системой тестирования

- Включить в вывод "столбик" сколько времени занял тест.. (конкретный шаг)

- Продумать как можно развязать паузу в <RunList> от "мощности компа", а то на слабых машинах она нужна побольше, на быстрых - поменьше,
а тесты в git для всех. Как вариант дать возможность в качестве проверки ready=".." указывать условие или вызывать скрипт например, как более 
универсальное решение.

- Добавить параметр --replace  для возможности задать какие-то правила замены из командной строки

- может переименовать WARNING --> BROKEN?

- Добавить возможность задать --log-screen-width для определения максимальной длины строк для вывода на экран (актуально обрезать для gitlab CI например)
