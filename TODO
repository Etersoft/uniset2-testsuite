- Использование action:reset_time (т.е. автоматического "сброса" значения датчика через заданное время)
скорее всего нельзя использовать в тестах основанных на сравнении результатов с "эталонным" логом теста.
Т.к. это не realtime таймер.. и "в общем случае" наверно приведёт к случайному "вклиниванию" лога "сброса"..
(хотя може просто отключить этот лог ?)

- 'action:multiset' и 'check:multicheck' нарушают правило "один тест за раз".. Но всё-таки удобны для начальной инициализации
и проверки сразу группы логически связанных условий
  + сделано

-----
1. Сделать action:sleep но с прерыванием не только по таймауту, но и по событию id=val.
   + сделал. Только всё-таки решил, что это не 'action', а 'check' (event).

2. Продумать насчёт action:script - запуск произвольного скрипта

3. Нужен ли multicheck? (можно сделать для коллекции)
   + сделан
4. Сделать в конце "проигрывания" вывод обобщёщного результата по всем тестам
   (и возможно ключ: --show-result-report)
   + сделал

5. Возможно стоит сделать ключик --show-only-failed-log

6. Сделать возможность задавать не ID датчика, а имя (by_name).
   Можно сделать "автодетект": если содержится хоть одна буква, значит имя..
   + cделал (через встроенную функцию: isdigit)

7. Сделать работу с удалёнными датчиками (встроить в UInterface getRemoteValue и setRemoteValue)
   + Сделал (даже больше: работа с разными configure.xml)

8. Сделать возможность задать не один конкретный тест, а сразу список.
Типа: --play-tests t1,t2,t3,t10,t8

9. Сделать action "ссылка на другой тест".. и ссылку на другой тест в другом файле..
   + (!!!) сделал. Теперь можно ссылаться и на тест внутри открытого файла и на внешний файл

10. Доделать обработку (outlink) ссылки 'ALL' - т.е. проигрывание всего файла (а не конретного теста)
   + сделал

11. В связи с появлением ссылок (да и вообще) сделать --check для проверки корректности файла
   - проверка на циклические ссылки
   - проверка на корректность имён тегов и т.п.

12. Сделать поле ignore="1" - для временного отключения теста.
    + сделал.

13. Продумать вопрос об уровне логов. Может ввести цифрофой уровень.
Чтобы можно было более плавно регулировать количество (подробность) выводимых логов.
Например:
      0 - выключено
    >=1 - только резултат
    >=2 - результат работы каждого теста отдельно
    >=3 - результат работы каждого вызова в тесте (но без вложенных (outlink))
    >=4 - результат работы каждого вызова в тесте (c вложенными (outlink))
    >=5 - + вывод actions

14. Продумать механизм шаблонов. Типа при вызове link указывать группу "ключ=значение"
и подставлять в вызванном тесте..
    + СДЕЛАЛ! (теперь можно "мощные" тесты писать). 
    Поле replace="key1=val1,key2=val2,.." (для link и outlink)
    Сделал три области видимости:
      1.  Глобальная - <TestList replace="...">
      2.  Область теста - <test replace="...">
      3.  Область вызова <check test="link" replace="...">

14.1 Щаз подменяется только id. Надо сделать подмену любого свойства!. Вплоть до link="prop=xx".
     Возможно, чтобы не было конфликта. replace стоит сделать в формате replace="var1:val,var2:val"
     Т.е. разделитель ':'. Чтобы можно было записать replace="VarLink:num=3", а в тесте <check test='link' link='VarLink'>
     + СДЕЛАЛ (разделитель ':' и подменять можно ""всё что обрабатывается")

15. Переименовать no_exception, в ignore_failed
    + сделал

16. Сделать ключ задающий число "проигрываний" теста. 
   "<0" - безконечно
   "0,1" - 1 раз
   (см. также п. 20) .
А вообще для консольного проигрывателя, циклы можно сделать простым скриптом на bash (запуская проигрыватель желаемое число раз)

16. В result_reports выводить общее время тестирования. Можно и по каждому тесту засекать.
    + сделал предварительную версию. Надо ещё подумать в чём измерять..

17. Сделать в плээре сигналы на разные события (begin/finish test, begin/finish item, begin/finish action, run check и т.п.),
    чтобы можно было написать графический плээр на основе консольного...
    - сигналы тянут за собой glib. Что для консольного лишнее.. :(

18. Если при "разворачивании" системы не запускается один из процессов. То почему-то остаются "висеть" уже запущенные..
 + добавил принудительную остановку

19. Добавить ещё и Modbus интерфейс (помимо работы с uniset), чтобы можно было писать тесты и для PLC.
 + сделано

20. Продумать возможность циклов (повторений).. (конкретного теста, конкретного дейтсвия, группы действий (можно вынести в отдельный тест под идее),
группу тестов (можно вынести в отдельный файл) ----> видимо универсальным будет "повторение действия заданное количество раз. -1 - безконечность".
   Хотя всё это уже похоже больше имитатор, чем "тестер".
   
21. В графическом плээере, сделать графическое отображение состояния запущенных фоновых процессов..

22. Реализовать меню "Открыть".

23. Сделать параметр --show-number-of-tests для отображения номеров тестов (по порядку). Например первым столбцом..
 Это удобно при разборе и т.д.

24. Сделать random - паузу. И может ещё что-нибудь на основе RANDOM (выставление случайного значения) из заданного диапазона

25. Отвязать запуск от обязательного присутсвия omniNames..
    К сожалению, это в самом uniset надо отвязывать.
    + сделано

26. Сделать графический sensor-viewer, с возможностью менять значения датчиков..
   это не связано по идее с системой тестирования

